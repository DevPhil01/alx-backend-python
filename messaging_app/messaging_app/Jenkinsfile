pipeline {
    agent any

    environment {
        GITHUB_BRANCH = 'main'
        GITHUB_REPO = 'https://github.com/DevPhil01/alx-backend-python.git'
        GITHUB_CREDENTIALS = 'github-creds'
        DOCKER_IMAGE = 'devphil01/messaging_app'  // Replace with your actual Docker Hub username/repo
        DOCKER_CREDENTIALS = 'docker-creds'       // Jenkins credentials ID for Docker Hub
    }

    stages {

        stage('Checkout') {
            steps {
                echo "Checking out code from git branch ${GITHUB_BRANCH}"
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${GITHUB_BRANCH}"]],
                    userRemoteConfigs: [[
                        url: "${GITHUB_REPO}",
                        credentialsId: "${GITHUB_CREDENTIALS}"
                    ]]
                ])
            }
        }

        stage('Install dependencies') {
            steps {
                sh '''
                    echo "Installing dependencies..."
                    pip3 install --upgrade pip
                    pip3 install -r messaging_app/requirements.txt
                '''
            }
        }

        stage('Run tests') {
            steps {
                sh '''
                    echo "Running tests with pytest..."
                    pytest --junitxml=messaging_app/reports/results.xml || true
                '''
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: 'messaging_app/reports/results.xml'
                    archiveArtifacts artifacts: 'messaging_app/reports/**', allowEmptyArchive: true
                }
            }
        }

        stage('Build Docker image') {
            steps {
                sh '''
                    echo "Building Docker image..."
                    docker build -t ${DOCKER_IMAGE}:latest messaging_app/
                '''
            }
        }

        stage('Push Docker image to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "Logging into Docker Hub..."
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        echo "Pushing image to Docker Hub..."
                        docker push ${DOCKER_IMAGE}:latest
                    '''
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed successfully!"
        }
    }
}
