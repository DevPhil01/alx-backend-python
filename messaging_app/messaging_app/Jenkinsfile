pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "phil96/messaging_app:latest"
    }

    stages {

        stage('Checkout') {
            steps {
                echo "Checking out source code from GitHub..."
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/DevPhil01/alx-backend-python.git',
                        credentialsId: 'github-creds'
                    ]]
                ])
            }
        }

        stage('Install dependencies') {
            steps {
                sh '''
                    echo "Setting up Python virtual environment..."
                    if [ "$(id -u)" -ne 0 ]; then
                        echo "Running as non-root, using pip --break-system-packages..."
                        python3 -m venv venv
                        . venv/bin/activate
                        python -m pip install --upgrade pip --break-system-packages
                        pip install -r messaging_app/requirements.txt --break-system-packages
                    else
                        echo "Running as root, installing python3-venv first..."
                        apt-get update -y && apt-get install -y python3-venv
                        python3 -m venv venv
                        . venv/bin/activate
                        python -m pip install --upgrade pip
                        pip install -r messaging_app/requirements.txt
                    fi
                '''
            }
        }

        stage('Run tests') {
            steps {
                sh '''
                    echo "Running tests with pytest..."
                    . venv/bin/activate
                    mkdir -p messaging_app/reports
                    pytest --junitxml=messaging_app/reports/results.xml || true
                '''
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: 'messaging_app/reports/results.xml'
                    archiveArtifacts artifacts: 'messaging_app/reports/**', allowEmptyArchive: true
                }
            }
        }

        stage('Build Docker image') {
            steps {
                sh '''
                    echo "Building Docker image..."
                    docker build -t $DOCKER_IMAGE messaging_app
                '''
            }
        }

        stage('Push Docker image to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "Logging in and pushing Docker image to Docker Hub..."
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push $DOCKER_IMAGE
                    '''
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed (check previous logs for any skipped stages or warnings)."
        }
    }
}
