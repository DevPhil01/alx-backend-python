pipeline {
  agent any

  stages {
    stage('Checkout') {
      steps {
        // Checkout the repo (Jenkins will already do this for pipeline from SCM)
        checkout([$class: 'GitSCM',
                  branches: [[name: '*/main']],
                  userRemoteConfigs: [[url: 'https://github.com/DevPhil01/alx-backend-python.git']]
                 ])
      }
    }

    stage('Install dependencies') {
      steps {
        dir('messaging_app') {
          sh '''
            # create venv and install deps
            python3 -m venv .venv
            . .venv/bin/activate
            python3 -m pip install --upgrade pip
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          '''
        }
      }
    }

    stage('Run tests') {
      steps {
        dir('messaging_app') {
          sh '''
            . .venv/bin/activate
            mkdir -p reports
            # produce JUnit XML that Jenkins can parse
            pytest --junitxml=reports/results.xml || true
          '''
        }
      }
      post {
        always {
          // Publish the junit results (path is workspace-relative)
          junit allowEmptyResults: true, testResults: 'messaging_app/reports/results.xml'
          // Optionally archive reports
          archiveArtifacts artifacts: 'messaging_app/reports/**', allowEmptyArchive: true
        }
      }
    }
  }

  post {
    always {
      echo "Pipeline finished"
    }
  }
}
