pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/DevPhil01/alx-backend-python.git',
                        credentialsId: 'github-creds'
                    ]]
                ])
            }
        }

        stage('Install dependencies') {
            steps {
                sh '''
                    echo "Setting up Python virtual environment..."
                    python3 -m venv venv
                    . venv/bin/activate
                    python -m pip install --upgrade pip
                    pip install -r messaging_app/requirements.txt
                '''
            }
        }

        stage('Run tests') {
            steps {
                sh '''
                    echo "Running tests with pytest..."
                    . venv/bin/activate
                    pytest --junitxml=messaging_app/reports/results.xml || true
                '''
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: 'messaging_app/reports/results.xml'
                    archiveArtifacts artifacts: 'messaging_app/reports/**', allowEmptyArchive: true
                }
            }
        }

        stage('Build Docker image') {
            steps {
                sh '''
                    echo "Building Docker image..."
                    docker build -t devphil01/messaging_app:latest messaging_app
                '''
            }
        }

        stage('Push Docker image to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "Pushing Docker image to Docker Hub..."
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push devphil01/messaging_app:latest
                    '''
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed successfully!"
        }
    }
}
